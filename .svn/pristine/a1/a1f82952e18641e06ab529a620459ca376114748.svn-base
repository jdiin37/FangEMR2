package model;

import library.dateutility.DateUtil;
import library.utility.EntityFactory;
import library.utility.JDBCUtilities;
import library.utility.MapUtil;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static library.utility.MapUtil.castToInt;

/**
 * Created by jeffy on 2017/10/13.
 */
public class LabRecord {
    private Connection con;

    public LabRecord(Connection con) {
        this.con = con;
    }

    public Map<String, Object> queryLabVisitedBychartNo(int chartNo) throws SQLException {
        String queryString =
                "SELECT COUNT(*) count " +
                "  FROM labrecordm a " +
                " WHERE a.chart_no = ? " +
                "   AND a.report_date IS NOT NULL ";

        EntityFactory labRecordEntity = new EntityFactory(con, queryString);
        return labRecordEntity.findSingle(new Object[]{chartNo});
    }

//    public Map<String, Object> queryLabVisitedBychartNoAndYears(String startDate, String endDate, int chartNo) throws SQLException {
//        String adStartDate = DateUtil.rocDateStringToADDateString(startDate);
//        String adEndDate = DateUtil.rocDateStringToADDateString(endDate);
//        String queryString =
//                "SELECT COUNT(*) count " +
//                "  FROM labrecordm a " +
//                " WHERE a.chart_no = ? " +
//                "   AND a.lab_date BETWEEN to_date(?, 'YYYYMMDD') AND to_date(?, 'YYYYMMDD') " +
//                "   AND a.report_date IS NOT NULL ";
//
//        EntityFactory labRecordEntity = new EntityFactory(con, queryString);
//        return labRecordEntity.findSingle(new Object[]{chartNo, adStartDate, adEndDate});
//    }

    public Map<String, Object> queryLabCountBychartNoDateRange(int chartNo, String startDate, String endDate) throws SQLException {
        List<Map<String, Object>> objects;
        Map<String, Object> result = new LinkedHashMap<>();

        objects = queryLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate);

        int count = objects.stream()
                .mapToInt(map -> castToInt(map.get("count")))
                .sum();
        result.put("count", count);

        return result;
    }

    public List<Map<String, Object>> queryLabCountByChartNoDateRangeGroupByKind(int chartNo, String startDate, String endDate) throws SQLException {
        String adStartDate = DateUtil.rocDateStringToADDateString(startDate);
        String adEndDate = DateUtil.rocDateStringToADDateString(endDate);
        String queryString =
                "SELECT a.kind_id, b.kind_name, b.report_subtitle, count(a.kind_id) count " +
                "  FROM labrecordm a, assaykind b " +
                " WHERE a.chart_no = ? " +
                "   AND a.lab_date BETWEEN to_date(?, 'YYYYMMDD') AND to_date(?, 'YYYYMMDD') " +
                "   AND a.report_date IS NOT NULL " +
                "   AND a.kind_id = b.kind_id(+) " +
                " GROUP BY a.kind_id, b.kind_name, b.report_subtitle " +
                " ORDER BY a.kind_id ";

        EntityFactory labRecordEntity = new EntityFactory(con, queryString);
        return labRecordEntity.findMultiple(new Object[]{chartNo, adStartDate, adEndDate});
    }

    public static void main(String[] args) {
        Connection myConnection = null;
        JDBCUtilities jdbcUtil = new JDBCUtilities();
        String resultStrng;

        try {
            myConnection = jdbcUtil.getConnection();
            LabRecord labRecord = new LabRecord(myConnection);

            int chartNo = 912473;
            int years = 105;
            String startDate = DateUtil.dateToROCDateString(LocalDate.now().plus(-years, ChronoUnit.YEARS));
            String endDate = DateUtil.dateToROCDateString(LocalDate.now());

            System.out.printf("\nLabRecord.queryLabCountBychartNoDateRange chartNo=%d startDate=%s endDate=%s JsonObject:%s ",
                    chartNo, startDate, endDate, MapUtil.mapToJsonObject(labRecord.queryLabCountBychartNoDateRange(chartNo, startDate, endDate)).toString());

            System.out.printf("\nLabRecord.queryLabCountByChartNoDateRangeGroupByKind chartNo=%d startDate=%s endDate=%s JsonArray:%s ",
                    chartNo, startDate, endDate, MapUtil.listMapToJsonArray(labRecord.queryLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate)).toString());


        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
        } finally {
            if (myConnection != null) {
                JDBCUtilities.closeConnection(myConnection);
            }
        }
    }
}



