package model;

import library.dateutility.DateUtil;
import library.utility.EntityFactory;
import library.utility.JDBCUtilities;
import library.utility.MapUtil;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;

/**
 * Created by jeffy on 2017/10/13.
 */
public class Patinp {
    private Connection con;

    public Patinp(Connection con) {
        this.con = con;
    }

    public Map<String, Object> queryInpVisitedBychartNo(int chartNo) throws SQLException {
        String queryString =
                "SELECT COUNT(*) count " +
                "  FROM patinp a " +
                " WHERE a.chart_no = ? " +
                "   AND a.ckin_date IS NOT NULL ";

        EntityFactory patinpEntity = new EntityFactory(con, queryString);
        return patinpEntity.findSingle(new Object[]{chartNo});
    }

    public Map<String, Object> queryInpVisitedBychartNoAndYears(String startDate, String endDate, int chartNo) throws SQLException {
        String queryString =
                "SELECT COUNT(*) count " +
                "  FROM patinp a " +
                " WHERE ckin_date BETWEEN ? AND ? " +
                "   AND a.chart_no = ? " +
                "   AND a.ckin_date IS NOT NULL ";

        EntityFactory patinpEntity = new EntityFactory(con, queryString);
        return patinpEntity.findSingle(new Object[]{startDate, endDate, chartNo});
    }


    public List<Map<String, Object>> queryPatinpByDischargeDate(String startDate, String endDate) throws SQLException {
        String queryString =
                "SELECT a.ckin_date, a.chart_no, a.serno, b.pt_name, b.id_no, b.sex,  " +
                        "       CASE WHEN b.sex = 1 THEN '男'  " +
                        "            WHEN b.sex = 2 THEN '女'  " +
                        "            ELSE '未知'  " +
                        "       END AS sex_name  " +
                        "  FROM patinp a, chart b  " +
                        " WHERE a.discharge_date BETWEEN ? AND ? " +
                        "   AND a.chart_no = b.chart_no(+)  " +
                        " ORDER BY a.ckin_date desc, a.chart_no, a.serno ";


        EntityFactory patinpEntity = new EntityFactory(con, queryString);
        return patinpEntity.findMultiple(new Object[]{startDate, endDate});
    }

    public static void main(String[] args) {
        Connection myConnection = null;
        JDBCUtilities jdbcUtil = new JDBCUtilities();
        String resultStrng;

        try {
            myConnection = jdbcUtil.getConnection();
            Patinp patinp = new Patinp(myConnection);

            int chartNo = 912473;

            System.out.printf("\nPatinp.queryInpVisitedBychartNo chartNo=%d JsonObject:%s ",
                    chartNo, MapUtil.mapToJsonObject(patinp.queryInpVisitedBychartNo(chartNo)).toString());

            String startDate = DateUtil.dateToROCDateString(LocalDate.now().plus(-4, ChronoUnit.YEARS));
            String endDate = DateUtil.dateToROCDateString(LocalDate.now());

            System.out.printf("\nPatinp.queryInpVisitedBychartNoAndYears startDate=%s endDate=%s chartNo=%d JsonObject:%s ",
                   startDate, endDate, chartNo, MapUtil.mapToJsonObject(patinp.queryInpVisitedBychartNoAndYears(startDate, endDate, chartNo)).toString());

            startDate = "1040120";
            endDate = "1061016";
            System.out.printf("\nPatinp.queryPatinpByDischargeDate startDate=%s endDate=%s JsonObject:%s ",
                    startDate, endDate, MapUtil.listMapToJsonArray(patinp.queryPatinpByDischargeDate(startDate, endDate)).toString());

        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
        } finally {
            if (myConnection != null) {
                JDBCUtilities.closeConnection(myConnection);
            }
        }
    }
}

