package service;

import abstracts.ServletAdapter;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import library.dateutility.DateComputeUtil;
import library.dateutility.DateUtil;
import library.utility.JDBCUtilities;
import library.utility.MapGroupingUtil;
import library.utility.MapUtil;
import library.utility.MatrixUtil;
import model.LabRecord;
import model.Patopd;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static library.utility.MapUtil.*;

/**
 * Created by jeffy on 2017/10/30.
 */
public class LabRecordService extends ServletAdapter {
    private List<Map<String, Object>> objects;
    private Map<String, Object> object;
    private JsonObject jsonObject = new JsonObject();
    private LabRecord labRecord;
    private Patopd patopd;

    private Map<String, Object> getFirstAndLastViewDateByChartNo(int chartNo) {
        Map<String, Object> result = new LinkedHashMap<>();
        try {
            result = patopd.queryFirstAndLastViewDateByChartNo(chartNo);
        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
        }
        return result;
    }

    private String adObjectToRocDateString(Object adDateObj) {
        String result = "";
        if (adDateObj != null) {
            result = DateUtil.adDateStringToROCDateString(castToStr(adDateObj));
        }
        return result;
    }

    public String getLabCountByChartNoDateRangeGroupByKind(int chartNo, String startDate, String endDate) {
        JsonObject jsob = new JsonObject();
        try {
            objects = labRecord.queryLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate);
            int count = objects.stream()
                    .mapToInt(map -> castToInt(map.get("count")))
                    .sum();

            jsob.addProperty(MapUtil.KEY_SUMMARY, count);
            jsob.add(MapUtil.KEY_DETAILDATA, MapUtil.listMapToJsonArray(objects));
            jsonObject = MapUtil.getSuccessResult(jsob);
//            if (objects.size() > 0) {
//                jsonObject = MapUtil.getSuccessResult(MapUtil.listMapToJsonArray(objects));
//            } else {
//                jsonObject = MapUtil.getFailureResult("LabRecord.queryLabCountByChartNoDateRangeGroupByKind chart_no= " + chartNo +
//                        " startDate=" + startDate + " endDate=" + endDate + " No Data Found ");
//            }

        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
            jsonObject = MapUtil.getFailureResult(ex.getMessage());
        }

        return jsonObject.toString();
    }

    public String getLabCountByChartNoYearsGroupByKind(int chartNo, int years) {
        String startDate = DateUtil.dateToROCDateString(LocalDate.now().plus(-years, ChronoUnit.YEARS));
        String endDate = DateUtil.dateToROCDateString(LocalDate.now());

        return getLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate);
    }

    public String getLabCountByChartNoGroupByKind(int chartNo) {
        String startDate = "0010101";
        Map<String, Object> map = getFirstAndLastViewDateByChartNo(chartNo);
        if (!map.isEmpty()) {
            startDate =  castToStr(map.get("first_view_date"));
        }
        String endDate = DateUtil.dateToROCDateString(LocalDate.now());
        return getLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate);
    }

    public String getLabListByChartNoDateRange(int chartNo, String startDate, String endDate) {
        try {
            objects = labRecord.queryLabListByChartNoDateRange(chartNo, startDate, endDate);

            if (!objects.isEmpty()) {
                for (Map<String, Object> map : objects) {
                    map.put("years", adObjectToRocDateString(map.get("lab_date")).substring(0, 3));
                    map.put("lab_date", adObjectToRocDateString(map.get("lab_date")));
                }

                jsonObject = MapUtil.getSuccessResult(MapUtil.listMapToJsonArray(objects));
            } else {
                jsonObject = MapUtil.getFailureResult("LabRecord.queryLabListByChartNoDateRange chart_no= " + chartNo +
                        " startDate=" + startDate + " endDate=" + endDate + " No Data Found ");
            }

        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
            jsonObject = MapUtil.getFailureResult(ex.getMessage());
        }

        return jsonObject.toString();
    }

    public String getLabListByChartNoYears(int chartNo, int years) {
        String startDate = DateUtil.dateToROCDateString(LocalDate.now().plus(-years, ChronoUnit.YEARS));
        String endDate = DateUtil.dateToROCDateString(LocalDate.now());

        return getLabListByChartNoDateRange(chartNo, startDate, endDate);
    }

    public String getLabListByChartNo(int chartNo) {
        String startDate = "0010101";
        Map<String, Object> map = getFirstAndLastViewDateByChartNo(chartNo);
        if (!map.isEmpty()) {
            startDate =  castToStr(map.get("first_view_date"));
        }
        String endDate = DateUtil.dateToROCDateString(LocalDate.now());

        return getLabListByChartNoDateRange(chartNo, startDate, endDate);
    }

    public String getMatrixLabDdataByChartNoLabTypeAndRange(
            int chartNo, String kindId, String startDate, String endDate) {
        List<Map<String, Object>> matrixObjects;
        List<Map<String, Object>> resultObjects;
        JsonArray jsonArray;

        try {
            objects = labRecord.queryLabDdataByChartNoLabTypeAndRange(chartNo, kindId, startDate, endDate);

            if (objects.size() > 0) {
                // convert lab_date form AD DateString to ROC DateString
                for (Map<String, Object> map : objects) {
                    map.put("lab_date", adObjectToRocDateString(map.get("lab_date")));
                }
                System.out.println("\nobjects:" + listMapToJsonArray(objects));

                // Create Matrix Object => Define xAxialName, yAxialName cellName
                String xAxialName = "assay_id";
                String yAxialName = "lab_date";
                String cellName = "result_val";
                MatrixUtil matrixUtil = new MatrixUtil(objects, xAxialName, yAxialName, cellName);
                matrixObjects = matrixUtil.getMatrixObjects();
                System.out.println("\nmatrixObjects:" + listMapToJsonArray(matrixObjects));

                // Merge other cols from source 'objects' to target 'matrixObjects'
                List<String> keyListToAdd = Arrays.asList("chart_no", "lab_reportno", "duplicate_no", "unit",
                        "normal_range", "kind_id", "kind_name", "kind_flag", "assay_judgetype", "lab_status",
                        "result_kind", "result_status", "lab_status");
                List<String> criteriaKeys = Arrays.asList("assay_id");
                resultObjects = matrixUtil.mergeMapFromSourceToTarget(objects, matrixObjects, keyListToAdd, criteriaKeys);
                System.out.println("\nresultObjects:" + listMapToJsonArray(resultObjects));

                // Convert 'resultObjects' to master-detail shape JsonArray
                List<String> masterCols = Arrays.asList("assay_id", "chart_no", "lab_reportno", "kind_id", "kind_name", "kind_flag");
                List<String> detailCols = Arrays.asList("lab_date", "result_val", "duplicate_no", "unit", "normal_range",
                        "assay_judgetype", "lab_status", "result_kind", "result_status", "lab_status" );
                jsonArray = MapGroupingUtil.groupListMapToJsonArray(MapGroupingUtil.getGroupingResultMap(resultObjects, masterCols, detailCols));
                System.out.println("\njsonArray:" + jsonArray);

                jsonObject = MapUtil.getSuccessResult(jsonArray);
            } else {
                jsonObject = MapUtil.getFailureResult("labRecord.queryLabDdataByChartNoLabTypeAndRange chartNo=" + chartNo
                        + " kindId='" + kindId + "' startDate='" + startDate + "' endDate='" + endDate
                        + "' No Data Found ");
            }

        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
            jsonObject = MapUtil.getFailureResult(ex.getMessage());
        }

        return jsonObject.toString();
    }

    @Override
    public String run(JsonObject parametersJsObj) {
        Connection myConnection = null;
        JDBCUtilities jdbcUtil = new JDBCUtilities();
        String result = null;

        try {
            myConnection = jdbcUtil.getConnection();
            labRecord = new LabRecord(myConnection);
            patopd = new Patopd(myConnection);
            String empNo = parametersJsObj.get("empNo").getAsString();
            String method = parametersJsObj.get("method").getAsString();

            // get Lab count by chart_no then group by kind_id
            if (method.equals("getLabCountByChartNoGroupByKind")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                result = getLabCountByChartNoGroupByKind(chartNo);
            }

            //  get Lab count by chart_no, years then group by kind_id
            if (method.equals("getLabCountByChartNoYearsGroupByKind")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                int years = parametersJsObj.get("years").getAsInt();
                result = getLabCountByChartNoYearsGroupByKind(chartNo, years);
            }

            //  get Lab count by chart_no, start_date, end_date then group by kind_id
            if (method.equals("getLabCountByChartNoDateRangeGroupByKind")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                String startDate = parametersJsObj.get("startDate").getAsString();
                String endDate = parametersJsObj.get("endDate").getAsString();
                result = getLabCountByChartNoDateRangeGroupByKind(chartNo, startDate, endDate);
            }

            // get Lab list by chart_no
            if (method.equals("getLabListByChartNo")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                result = getLabListByChartNo(chartNo);
            }

            // get Lab list by chart_no, years
            if (method.equals("getLabListByChartNoYears")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                int years = parametersJsObj.get("years").getAsInt();
                result = getLabListByChartNoYears(chartNo, years);
            }

            // get Lab list by chart_no, startDate, endDate
            if (method.equals("getLabListByChartNoDateRange")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                String startDate = parametersJsObj.get("startDate").getAsString();
                String endDate = parametersJsObj.get("endDate").getAsString();
                result = getLabListByChartNoDateRange(chartNo, startDate, endDate);
            }

            // getMatrixLabDdataByChartNoLabTypeAndRange
            if (method.equals("getMatrixLabDdataByChartNoLabTypeAndRange")) {
                int chartNo = parametersJsObj.get("chartNo").getAsInt();
                String kindId = parametersJsObj.get("kindId").getAsString();
                String range = parametersJsObj.get("range").getAsString();
                List<String> dateList = DateComputeUtil.getStartDateEndDate(range);
                String startDate = dateList.get(0);
                String endDate = dateList.get(1);

                result = getMatrixLabDdataByChartNoLabTypeAndRange(
                        chartNo, kindId, startDate, endDate);
            }

        } catch (SQLException ex) {
            JDBCUtilities.printSQLException(ex);
        } finally {
            if (myConnection != null) { JDBCUtilities.closeConnection(myConnection); }
        }
        return result;
    }


    public static void main(String[] args) {
        JsonObject jsonObject = new JsonObject();
        //Map<String, String> map = new LinkedHashMap<>();
        LabRecordService labRecordService = new LabRecordService();
        String resultStrng;

        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("method", "getLabCountByChartNoGroupByKind");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabCountByChartNoGroupByKind chartNo=923833 :"  + resultStrng);



        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("years", 5);
        jsonObject.addProperty("method", "getLabCountByChartNoYearsGroupByKind");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabCountByChartNoYearsGroupByKind chartNo=923833 years=5 :"  + resultStrng);

        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("startDate", "0940806");
        jsonObject.addProperty("endDate", "1030913");
        jsonObject.addProperty("method", "getLabCountByChartNoDateRangeGroupByKind");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabCountByChartNoDateRangeGroupByKind chartNo=923833 startDate='0940806' endDate='1030913' :"  + resultStrng);

        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("method", "getLabListByChartNo");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabListByChartNo chartNo=923833 :"  + resultStrng);

        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("years", 5);
        jsonObject.addProperty("method", "getLabListByChartNoYears");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabListByChartNoYears chartNo=923833 years=5 :"  + resultStrng);

        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("startDate", "0940806");
        jsonObject.addProperty("endDate", "1030913");
        jsonObject.addProperty("method", "getLabListByChartNoDateRange");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getLabListByChartNoDateRange chartNo=923833 startDate='0940806' endDate='1030913' :"  + resultStrng);


        jsonObject = new JsonObject();
        jsonObject.addProperty("empNo", "ORCL");
        jsonObject.addProperty("sessionID", 1);
        jsonObject.addProperty("chartNo", 923883);
        jsonObject.addProperty("kindId", "A1");
        jsonObject.addProperty("range", "0960325|1030210");
        jsonObject.addProperty("method", "getMatrixLabDdataByChartNoLabTypeAndRange");
        resultStrng = labRecordService.run(jsonObject);
        System.out.println("\nParameters JsonObject string: " + jsonObject);
        System.out.println("\nLabRecordService.run getMatrixLabDdataByChartNoLabTypeAndRange chartNo=923883 kineId='A1' range='1030101|' :"  + resultStrng);

    }
}

